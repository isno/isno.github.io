<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>isno的网络日志</title><link href="http://www.isno.cn/" rel="alternate"></link><link href="http://www.isno.cn/feeds/all.atom.xml" rel="self"></link><id>http://www.isno.cn/</id><updated>2016-05-13T00:00:00+08:00</updated><entry><title>RxSwift</title><link href="http://www.isno.cn/rxswift.html" rel="alternate"></link><updated>2016-05-13T00:00:00+08:00</updated><author><name>isno</name></author><id>tag:www.isno.cn,2016-05-13:rxswift.html</id><summary type="html"></summary></entry><entry><title>BSON原理解析</title><link href="http://www.isno.cn/entity/bson.html" rel="alternate"></link><updated>2015-01-05T16:00:28+08:00</updated><author><name>isno</name></author><id>tag:www.isno.cn,2015-01-05:entity/bson.html</id><summary type="html">&lt;p&gt;BSON是专为mongodb而设计的一种类似json的二进制存储格式。Mongodb数据存储和对外界的网络传输都是以bson为基础!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.bson的类型包括基础类型和扩展类型&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基础类型 byte, int32, int64, double(存储时会转换为int64)&lt;/li&gt;
&lt;li&gt;扩展类型包括 map, array, binary data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;bson对每种类型用16进制做了一个归类，以便于转换存储&lt;/p&gt;
&lt;p&gt;eg. \x02 =&amp;gt; string, \x03 =&amp;gt; document, x\10=&amp;gt; int32 等等 &lt;a href="http://bsonspec.org/spec.html" title="http://bsonspec.org/spec.html"&gt;http://bsonspec.org/spec.html&lt;/a&gt;(官方文档)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.bson的存储结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果说bson是一个document，那么该document是以下结构进行存储&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[4]byte(length) + byte(element.type) + []byte(element.key) + byte(0) + []byte(element.value) + byte(0)&lt;/em&gt;
&lt;pre&gt;
&lt;code class="go"&gt;data = {"a":1}
Println(bson.Marshal(data)) // out  [12 0 0 0 16 97 0 1 0 0 0 0]&lt;/code&gt;
&lt;/pre&gt;
以上面输出为例&lt;/p&gt;
&lt;p&gt;整个结构长度为12byte, 结构类型为16 (16=\x10), element.key 为97， 对应ascii a, 后面的1 0 0 0 为 [4]bye(int32(1))&lt;/p&gt;
&lt;p&gt;解释下1为什么会转换为 1 0 0 0&lt;/p&gt;
&lt;p&gt;一个byte是8bit, int32 为4*8 bit, int32转换为byte 要申请4byte的空间, 再通过移位运算将int分配到4个byte中&lt;br /&gt;
{00000000...00000001}, 00000001到byte[0], 000...到byte[1]..
即 byte(1&amp;gt;&amp;gt;0)+ byte(1&amp;gt;&amp;gt;8)+ byte(1&amp;gt;&amp;gt;16)+ byte(1&amp;gt;&amp;gt;24), 解析的时候再进行左移还原&lt;/p&gt;
&lt;p&gt;在bson中 map, array 以子document的形式顺序存在父docuement中
&lt;pre&gt;
&lt;code class="go"&gt;data = {"a":{"a":1}}
Println(bson.Marshal(data)) // out  [20 0 0 0 3 97 0 12 0 0 0 16 97 0 1 0 0 0 0 0]&lt;/code&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结来说bson的几个特点&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对比json 增加额外数据结构(binary data), 如果用json, 二进制数据需要通过另外的计算转换为 string&lt;/li&gt;
&lt;li&gt;bson的头部存储了文档的长度，这种方式对节点查找非常方便，不需要载入整个文档，仅对文件进行seek定位就可快速查找！ &lt;/li&gt;
&lt;li&gt;内部类型int, double等都是固定长度存储，针对这种结构修改，数据总的长度不会改变!&lt;/li&gt;
&lt;li&gt;结构转换相对来说会让整个文档体积变的更大(目前存储容量都以GB为单位，大部分应用都可以忽略不计)&lt;/li&gt;
&lt;/ol&gt;</summary><category term="bson"></category></entry><entry><title>aop在php项目上的应用</title><link href="http://www.isno.cn/entity/php-aop.html" rel="alternate"></link><updated>2014-12-13T10:38:54+08:00</updated><author><name>isno</name></author><id>tag:www.isno.cn,2014-12-13:entity/php-aop.html</id><summary type="html">&lt;p&gt;我们在谈到设计模式的时候，基本上追求的目标都是都是调用者和被调用者之间的解耦,增强可重用性,以及提高开发效率! 在设计一个复杂项目的时候，如果没有很好的处理主业务与次业务的关系，很容易让程序变的耦合严重，对后续的开发和维护造成一定的成本!&lt;/p&gt;
&lt;p&gt;以微博发布流程为例&lt;/p&gt;
&lt;h2&gt;未改进的情况&lt;/h2&gt;
&lt;p&gt;&lt;pre&gt;
&lt;code class="php"&gt;
&amp;lt;?php
class Entry{
    function save($title){
        $this-&amp;gt;db-&amp;gt;save($title);
        return True;
    }
}
$entry = new Entry();
$entry-&amp;gt;save();
// OK，发博文成功
?&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;这是一个最基本的发博文代码
但真实情况不会这么简单，随着业务的不断发展，后续可能需要加上log记录, 权限判断, 面对这样的需求，代码可能会这么写
&lt;pre&gt;
&lt;code class="php"&gt;
&amp;lt;?php
class Auth{
        function check(){
                return False;
        }
}
$Auth = New Auth();
if($Auth-&amp;gt;check()){
        $Entry = new Entry();
        $Entry-&amp;gt;save();
        $Log = new Log();
        $Log-&amp;gt;save();
        // OK，发博文成功
}else{
        // 发博文失败
}
?&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
代码稍微有点混乱了，但还是在可接受的范围内!
业务还在线上跑，不断的发展，后续扩展的子业务也不断增加：统计功能，sphinx全文搜索，第三方推送, 审核功能...&lt;/p&gt;
&lt;p&gt;功能越加越多，需求也越来越变态.. 某某功能需要在发博文之前，某某需要在发博文之后，某某需要控制博文发表, 某某功能需要在权限功能之前&lt;/p&gt;
&lt;p&gt;不难发现，没有一个好的模式随着次业务越来越多，最终代码变的臃肿不堪,难以测试，各种优先级，关系，也带来了各种陷阱..&lt;/p&gt;
&lt;p&gt;不论最开始的开发人员还是后续维护的，看到这种代码无外乎头疼脑裂, 想改善也难以下手
&lt;img alt="" src="/static/entity.jpg" /&gt;
&lt;em&gt;最终的业务流程图!&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;如何改进&lt;/h2&gt;
&lt;p&gt;写程序中最大的两道难题? 一个是解耦，另外一个是变量命名!&lt;/p&gt;
&lt;p&gt;完全解耦不可能，但我们可以利用好的设计模式最大化的降低耦合! &lt;/p&gt;
&lt;p&gt;以上的例子提到了主业务与次业务两个概念，这里说明一下：整个系统的主要功能是发表博文，无论代码如何修改，发博文的业务几乎不变，这就是业务逻辑的主干! 而对于频繁修改的日志，权限，审核等称之为次业务! &lt;/p&gt;
&lt;p&gt;好的设计方式主业务和次业务尽量分开，尽量减少干扰。
主业务只干自己的事而不必关心任何的次业务，各个次业务相对独立运行, 和其他次业务也不产生耦合!
我们可以把日志，权限，审核等称做不同的切面！面向切面编程(aop)目标就是:把不同的切面从主业务代码中划分出来，通过这种分类，我们不论对切莫如何修改，对主业务逻辑都不会产生影响!&lt;/p&gt;
&lt;p&gt;从上面的例子来看，切面的切入方式总结起来有三种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;before&lt;/strong&gt; 是在所切入方法执行之前执行一段逻辑。 (权限)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;after&lt;/strong&gt; 是在所切入方法执行之后执行一段逻辑。 (日志，统计)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;around&lt;/strong&gt; 是可以同时在所切入方法的前后执行一段逻辑。 (内容审核等)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在网上搜索php AOP一些零星的内容，总觉得不尽人意! 根据这些内容，要实际应用起来还挺困难!
说说在我看来比较完美的实现方式: 利用递归对象链的方式实现PHP AOP!&lt;/p&gt;
&lt;p&gt;对象链比较难解释，这里用图片说明一下
先看一下 打印对象链的结构体
&lt;img alt="" src="/static/nup.png" /&gt;&lt;/p&gt;
&lt;p&gt;简单来说, 对象链是一个AdviceContainer对象，该对象包含两个属性 1.target 2. advice每一个切面都是一个 AdviceContainer对象, advice 包含了切面的切入方式和方法, target 又是一个 AdviceContainer 对象,一直不断的递归，直到最后一链 主业务类 Entery&lt;/p&gt;
&lt;p&gt;从上面的图可以看出，所有的 target 只有两种形态&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AdviceContainer Object&lt;/li&gt;
&lt;li&gt;Entry Object&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从这种区别中，我们在执行对象链的时候，就可以区分出哪些是切面方法，哪个是主业务类&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/aop.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;相比之前的流程图，现在这种处理方式变的非常流畅，支线业务也可以通过配置无缝的切入到主业务之上, 主业务也不用做任何修改!!!&lt;/p&gt;
&lt;p&gt;类库的代码就不再详解,以下为github的类库地址, 可以实现基本不改业务代码的情况下无缝切入(已使用在生产环境)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/isno/php-aop" title="https://github.com/isno/php-aop"&gt;https://github.com/isno/php-aop&lt;/a&gt;&lt;/p&gt;</summary><category term="php"></category><category term="aop"></category></entry></feed>